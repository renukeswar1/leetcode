Design Twitter like application:
    Step 1: Requirement clarifications:
            1: Is it going to be only web or do we need to have mobile app also
            2: Will users of this service able to post tweets and follow other people
            3: Search tweets
            4: How about notifications on web/mobile
            5: Will tweets going to be only text or is it going to be images and videos
            6: Do we need to display any hot topic tweets
            7: Should we also design to create and display the user's timeline.
    Step 2: Back of envelop estimations:
            1: what scale is expected from the system(example: no of tweets, no of tweet views, no of
                                    timeline generations per sec etc..)
            2: How much storage will we need? We need to have different storage requirements if user tweet contains
                videos or images
            3: What network bandwidth usage we are expecting ? This will be crucial in deciding how we will manage
                traffic and balance load between servers
    Step 3: System interface definition
         Some of the API's will look like as below
            1: postTweet(user_id, tweet_data, tweet_location, user_location, timestamp, …)
            2: generateTimeline(user_id, current_time, user_location, …)
            3: markTweetFavorite(user_id, tweet_id, timestamp, …)
    Step 4: Defining data model
            User: UserID, Name, Email, DoB, CreationDate, LastLogin, etc.
            Tweet: TweetID, Content, TweetLocation, NumberOfLikes, TimeStamp, etc.
            UserFollow: UserID1, UserID2
            FavoriteTweets: UserID, TweetID, TimeStamp

            Which db we need to have either NoSQL (Cassandra) or SQL like MySQL
            Which block storage we need to use to store videos and images
    Step 5: High level design
            For high level design , we need multiple application servers and load balancer to distribute the traffic.
            Think how system should be designed is it going to be read heavy or write heavy
            Efficient database to store images/videos
    Step 6: Detailed Design
            Based on interviewer's feedback , discussion will continue. We should present pros and cons for each topic
            1: Since we will be storing a massive amount of data, how should we partition our data to distribute
            it to multiple databases? Should we try to store all the data of a user on the same database?
            What issue could it cause?
            2: How will we handle hot users who tweet a lot or follow lots of people?
            3: Since users' timeline will contain the most recent (and relevant) tweets, should we try to store our
            data so that it is optimized for scanning the latest tweets?
            4: How much and at which layer should we introduce cache to speed things up?
            5: What components need better load balancing?

    Step 7: Identifying and resolving bottlenecks
            Try to discuss more on bottlenecks
            1: is there any single point of failure in  our system?What do we do to mitigate this?
            2: Do we have enough replicas of data so that we still serve our users if some servers fail
            3: Similarly, do we have enough copies of different services running such that a few failures
                will not cause a total system shutdown?
            4:How do we monitor the system performance ? Do we get any alerts if any application fails or performacen degrade?
